100-matrix_mul module
=====================
Module multiples two(2) matrices

Usage
=====

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

---------------------------------------------------
if m_a or m_b is not a list: 
raise a **TypeError** exception with the message 
``m_a must be a list``
or 
``m_b must be a list``
---------------------------------------------------
>>> matrix_mul(None, None)
Traceback (most recent call last):
..
TypeError: m_a must be a list

>>> matrix_mul(None, [])
Traceback (most recent call last):
..
TypeError: m_a must be a list

>>> matrix_mul([], None)
Traceback (most recent call last):
..
TypeError: m_b must be a list

---------------------------------------------------
if ``m_a`` or ``m_b`` is not a list of lists: 
raise a **TypeError** exception with the message 
``m_a must be a list of lists``
or 
``m_b must be a list of lists``
---------------------------------------------------
>>> matrix_mul([2,3], [])
Traceback (most recent call last):
..
TypeError: m_a must be a list of lists

>>> matrix_mul([[]], [2,3])
Traceback (most recent call last):
..
TypeError: m_b must be a list of lists

>>> matrix_mul([2,3], [3])
Traceback (most recent call last):
..
TypeError: m_a must be a list of lists

---------------------------------------------------
if m_a or m_b is empty (it means: = [] or = [[]]): 
raise a **ValueError** exception with the message 
``m_a can't be empty``
or 
``m_b can't be empty``
---------------------------------------------------
>>> matrix_mul([], [])
Traceback (most recent call last):
..
ValueError: m_a can't be empty

>>> matrix_mul([[]], [[]])
Traceback (most recent call last):
..
ValueError: m_a can't be empty

>>> matrix_mul([[1, 2]], [[]])
Traceback (most recent call last):
..
ValueError: m_b can't be empty

>>> matrix_mul([[1, 2]], [])
Traceback (most recent call last):
..
ValueError: m_b can't be empty

---------------------------------------------------
if one element of those list of lists is not an integer or a float: 
raise a ``TypeError`` exception with the message
``m_a should contain only integers``
or 
``floats or m_b should contain only integers or floats``
---------------------------------------------------
>>> matrix_mul([[1,2,3], [4,5,6]], [[1,2,"3"]])
Traceback (most recent call last):
..
TypeError: m_b should contain only integers or floats

>>> matrix_mul([["1",2,3], [4,5,6]], [[1,2,"hello"]])
Traceback (most recent call last):
..
TypeError: m_a should contain only integers or floats

---------------------------------------------------
if ``m_a`` or ``m_b`` is not a rectangle (all ‘rows’ should be of the same size): 
raise a ``TypeError`` exception with the message 
``each row of m_a must be of the same size`` 
or 
``each row of m_b must be of the same size``
---------------------------------------------------
>>> matrix_mul([[1,2,3], [4,5,6]], [[1,2], [3]])
Traceback (most recent call last):
..
TypeError: each row of m_b must be of the same size

>>> matrix_mul([[1,2], [4,5,6]], [[1,2], [3]])
Traceback (most recent call last):
..
TypeError: each row of m_a must be of the same size


---------------------------------------------------
If m_a and m_b can’t be multiplied: 
raise a ``ValueError`` exception with the message 
``m_a and m_b can't be multiplied``
(nxm) . (pxq) is only possible if m=p. 
The resulting matrix will have dimension: nxq
---------------------------------------------------
# FAIL: (2x2).(3.2); 2!=3
>>> matrix_mul([[1,2], [4,5]], [[1,2], [3, 4], [5,6]])
Traceback (most recent call last):
..
TypeError: m_a and m_b can't be multiplied

# FAIL: (2x3).(2.3); 3!=2
>>> matrix_mul([[1,2,3], [4,5,6]], [[1,2], [3, 4]])
Traceback (most recent call last):
..
TypeError: m_a and m_b can't be multiplied

---------------------------------------------------
Return product of two matrices
---------------------------------------------------
>>> matrix_mul([[1,2],[3,4]], [[1,2],[3,4]])
[[7, 10], [15, 22]]
